#!/usr/bin/python2.7

'''
WELAB - Log management module for garbaging paper sign sheet.
Author: Stefano Enrico Mendola (aka Hyd3L, STE col teschio)

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
'''

import os
import sys
from datetime import datetime

VERSION = "1.3"
HOSTNAME = "schifomacchina"
LOG_PATH = "/home/weeeopen/.welab/log.dat"
USERS_PATH = "/home/weeeopen/.welab/users.dat"


def help(scriptName, forWhat):
    if forWhat == "login":
        print "usage: " + scriptName + " login <username>"
        print HOSTNAME + ": Username format is 'first.last' or 'XXXXXX'"
        print "                where XXXXXX is your serial number."
        print "                You can even use an alias if defined."
        sys.exit()

    elif forWhat == "logout":
        print "usage: " + scriptName + " logout <username>"
        print HOSTNAME + ": Username format is 'first.last'"
        print "                where XXXXXX is your serial number."
        print "                You can even use an alias if defined."
        sys.exit()

    elif forWhat == "show":
        print "usage: " + scriptName + " show <option>"
        print "  available options:"
        print "    log : View log file."
        print "    ops : View list of operators in lab now."
        sys.exit()

    else:
        print "WELAB v"+VERSION+" - Lab operators management module."
        print "Author: Stefano Enrico Mendola (aka Hyd3L, STE col teschio)"
        print "Copyright (C) 2017 WeeeOpen - Politecnico di Torino"
        print "This program comes with ABSOLUTELY NO WARRANTY."
        print "Since this is a free software, you are welcome"
        print "to redistribute it under the terms of the GNU GPLv3.\n"
        print "  Available commands:"
        print "    login  <username> : Sign access to the lab."
        print "    logout <username> : Sign quit from the lab."
        print "    show   <option>   : Retrieve informations."
        sys.exit()


# Check if log file exists.
def checkLogFile():
    if os.path.isfile(LOG_PATH) is False:
        print "error: Log file not found."
        sys.exit()


# Check if users list file exists.
def checkUsersFile():
    if os.path.isfile(USERS_PATH) is False:
        print "error: Users list not found."
        sys.exit()


# Check if an username exists in users list file.
def checkMember(username):
    checkUsersFile()
    found = False
    usersFile = open(USERS_PATH, "r")

    for line in usersFile:
        # Remove newline character from the line read from file
        line = line.replace("\n","")
        words = line.split()
        if username in words:
            found = True
            username = words[0]
            break
    usersFile.close()

    if not found:
        print "error: Username not recognized."
        print HOSTNAME + ": Maybe you misspelled it or you're an intruder."
        sys.exit()
    return username


# Check if user is already logged in.
def isLoggedIn(username):
    username = checkMember(username)
    logged = False
    logFile = open(LOG_PATH, "r")
    for line in logFile:
        if ("INLAB" in line) and (username in line):
            logged = True
            break
    logFile.close()
    return logged


def nameExtr(username):
    return username.split('.')[0].capitalize() + " " + username.split('.')[1].capitalize()


# Check if inputFile is empty.
def isEmpty(inputFile):
    if str(inputFile.read())[:1] == "":
        inputFile.close()
        return True
    else:
        inputFile.seek(0)
        return False


def createBackupIfNecessary():
    logFile = open(LOG_PATH, "r")
    if isEmpty(logFile) is False:
        lastLine = str(logFile.read())[4:11]
        logFile.close()

        currMonth = int(datetime.now().strftime("%m"))
        currYear = int(datetime.now().strftime("%Y"))
        lastMonth = int(datetime.now().strptime(lastLine,"%m/%Y").strftime("%m"))
        lastYear = int(datetime.now().strptime(lastLine,"%m/%Y").strftime("%Y"))

        if (currMonth > lastMonth) or (currYear > lastYear):
            print HOSTNAME + ": Backing up log file... ",
            os.rename(LOG_PATH, LOG_PATH + str(lastYear) + str(lastMonth).zfill(2))
            print "Done!"
            logFile = open(LOG_PATH, "w")
            logFile.close()
            print HOSTNAME + ": New log file was created."


def login(username):
    checkLogFile()
    createBackupIfNecessary()
    username = checkMember(username)
    currTime = datetime.now().strftime("%d/%m/%Y %H:%M")
    loginString = "["+currTime+"] "+"[----------------] [INLAB] "+"<"+username+">"+"\n"

    if isLoggedIn(username):
        print HOSTNAME + ": " + nameExtr(username) + ", you're already logged in."
    else:
        logList = []
        logList.append(loginString)

        logFile = open(LOG_PATH, "r")
        for line in logFile:
            logList.append(line)
        logFile.close()

        logFile = open(LOG_PATH, "w")
        for line in logList:
            logFile.write(line)
        logFile.close()

        print HOSTNAME + ": Login successful! Hello " + nameExtr(username) + "!"


# Returns the time spent in lab formatted as HH:MM
def workTime(timein, timeout):
    hours = int(timeout[:2]) - int(timein[:2])
    mins = int(timeout[3:5]) - int(timein[3:5])
    if hours < 0:
        hours += 24
    if mins < 0:
        mins += 60
        hours -= 1
    return str(hours).zfill(2)+":"+str(mins).zfill(2)


def logout(username):
    checkLogFile()
    username = checkMember(username)
    currTime = datetime.now().strftime("%d/%m/%Y %H:%M")
    found = False

    logList = []
    logFile = open(LOG_PATH, "r")
    for line in logFile:
        if ("INLAB" in line) and (username in line):
            found = True
            loginTime = line[12:17]
            logouTime = currTime[11:17]
            line = line.replace("----------------",currTime)
            line = line.replace("INLAB",workTime(loginTime,logouTime))
            line = line.replace("\n","")
            workdone = raw_input(HOSTNAME+": What have you done?\n:: ")
            while len(workdone) > 128:
                print HOSTNAME+": I didn't ask you the story of your life!"
                workdone = raw_input(HOSTNAME+": What have you done? [BRIEFLY]\n>> ")
            line = line + " :: " + workdone + "\n"
        logList.append(line)  # Store everything in the list
    logFile.close()

    if found:
        # Writing everything to log file
        logFile = open(LOG_PATH, "w")
        for line in logList:
            logFile.write(line)
        logFile.close()
        print HOSTNAME + ": Logout successful! Bye " + nameExtr(username) + "!"
    else:
        print HOSTNAME + ": " + nameExtr(username) + " is not in lab!"


def show(option):
    checkLogFile()

    if option == "log":
        print HOSTNAME + ": Reading log file...\n"
        logFile = open(LOG_PATH, "r")
        for line in logFile:
            print line,
        logFile.close()

    elif option == "ops":
        count = 0
        currDay = datetime.now().strftime("%d/%m/%Y")
        print HOSTNAME + ": Reading log file...\n"
        logFile = open(LOG_PATH, "r")
        for line in logFile:
            if ("INLAB" in line) and (currDay in line):
                count += 1
                print "> " + nameExtr(line[47:line.rfind(">")])
        logFile.close()

        if count == 0:
            print HOSTNAME + ": Nobody is in lab right now."
        elif count == 1:
            print HOSTNAME + ": There is one operator in lab right now."
        else:
            print HOSTNAME + ": There are {c} operators in lab right now.".format(c=count)

    # Uovo di Pasqua
    # elif option == "beer":
    #     print HOSTNAME + ": Sadly my constructors haven't considered to add"
    #     print "                such component in my system, but I could hold your"
    #     print "                beer if you want [Y/n]",
    #     response = raw_input()
    #     if response == "y" or response == "Y" or response == "":
    #         os.system("eject /dev/cdrom")
    #         print HOSTNAME + ": Alright! Lean here your beer :-)"
    #     else:
    #         print HOSTNAME + ": As you desire! :-)"
    # else:
    #     print "error: Invalid option detected."
    #     print HOSTNAME + ": Try with 'help show'."


def main(args):
    if len(args) < 2:
        print "usage: welab <command> <arguments>"
        sys.exit()
    command = args[1]

    # Add commands here
    if command == "help":
        if len(args) < 3:
            help("welab", "default")
        elif len(args) >= 3:
            help("welab", args[2])

    elif command == "login":
        if len(args) != 3:
            print "usage: welab login <username>"
            sys.exit()
        else:
            login(args[2])

    elif command == "logout":
        if len(args) != 3:
            print "usage: welab logout <username>"
            sys.exit()
        else:
            logout(args[2])

    elif command == "show":
        if len(args) != 3:
            print "usage: welab show <item>"
            print "  available items:"
            print "    log : View log file."
            print "    ops : View list of operators in lab now."
            sys.exit()
        else:
            show(args[2])
    else:
        print "error: Invalid command detected -> " + args[1]
        print HOSTNAME + ": Try with 'welab help'"


if __name__ == '__main__':
    main(sys.argv)

